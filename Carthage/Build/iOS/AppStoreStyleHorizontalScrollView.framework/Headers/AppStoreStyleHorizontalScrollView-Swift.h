// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIView;
@class NSCoder;

SWIFT_CLASS("_TtC33AppStoreStyleHorizontalScrollView22ASHorizontalScrollView")
@interface ASHorizontalScrollView : UIScrollView <UIScrollViewDelegate>
@property (nonatomic) CGRect frame;
/// y position of all items
@property (nonatomic) CGFloat itemY;
/// an array which refer to all added items
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull items;
/// center subviews when items do not occupy whole screen
@property (nonatomic) BOOL shouldCenterSubViews;
/// the uniform size of all added items, please set it before adding any items, otherwise, default size will be applied
@property (nonatomic) CGSize uniformItemSize;
/// the width to move to next item when target point which stops at an item is larger or equal than, default value is 1/3 that means, for example, if scrolling stops at half of an item, auto scroll to next item
@property (nonatomic) CGFloat widthToScrollNextItem;
/// store the current items’ margin
@property (nonatomic) CGFloat itemsMargin;
/// the margin between left border and first item
@property (nonatomic, readonly) CGFloat leftMarginPx;
/// the mini margin between items, it is the seed to calculate the actual margin which is not less than
@property (nonatomic, readonly) CGFloat miniMarginPxBetweenItems;
/// the mini width appear for last item of current screen, set it 0 if you don’t want any part of the last item appear on the right
@property (nonatomic, readonly) CGFloat miniAppearPxOfLastItem;
/// number of items per screen, it can be integer like 3, that means total 3 items occupy whole screen, 4.5 means total 4 items and one half item show on the right end
@property (nonatomic, readonly) float numberOfItemsPerScreen;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)touchesShouldCancelInContentView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// It re-calculate the item margin to fit in current view frame
/// note:
/// This must be called after changing any size or margin property of this class to get acurrate margin
/// seealso:
/// calculateMarginBetweenItems
- (void)setItemsMarginOnce;
/// Calculate the exact margin between items
- (CGFloat)calculateMarginBetweenItems SWIFT_WARN_UNUSED_RESULT;
/// Calculate the exact margin by frame
- (CGFloat)calculateMarginByFrame SWIFT_WARN_UNUSED_RESULT;
/// Calculate the exact margin by number of items per screen
- (CGFloat)calculateMarginByNumberPerScreen SWIFT_WARN_UNUSED_RESULT;
/// This add a new item into the scrollview
/// \param item the item you would like to add, it must not be nil.
///
- (void)addItem:(UIView * _Nonnull)item;
/// This add multi new items into the scrollview
/// \param items the items in array you would like to add, it must not be nil.
///
- (void)addItems:(NSArray<UIView *> * _Nonnull)items;
/// It removes the specified item from scrollview
/// \param item the item you would like to remove.
///
///
/// returns:
/// true if removing successfully.
- (BOOL)removeItem:(UIView * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// It removes all items from scrollview
///
/// returns:
/// true if removing successfully.
- (BOOL)removeAllItems SWIFT_WARN_UNUSED_RESULT;
/// It removes the specified item at index from scrollview
/// \param index the index of item you would like to remove.
///
///
/// returns:
/// true if removing successfully.
- (BOOL)removeItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Refresh all subviews for changing size of current frame
- (void)refreshSubView;
/// center subviews if all items can not fully occupy whole screen width
///
/// returns:
/// the scroll view content width
- (CGFloat)centerSubviews SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end

#pragma clang diagnostic pop
